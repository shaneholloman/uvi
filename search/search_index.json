{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UVI","text":"<p>The future of Python project templating powered by UV</p> <p>UVI (UV Init) is a modern Python project generator built around UV - the revolutionary package manager that's reshaping the Python ecosystem. It provides a streamlined CLI that generates fully-configured Python projects with best practices and modern development tools already set up.</p>"},{"location":"#why-uvi","title":"Why UVI?","text":"<p>UVI lets you instantly create production-ready Python projects with a single command. Every project comes with:</p> <ul> <li>UV at the core: 10-100x faster dependency management</li> <li>Modern code quality: ruff (with Pylint rules), mypy, deptry, and prettier</li> <li>CI/CD integration: GitHub Actions workflows configured</li> <li>Git hooks: Automated checks with pre-commit</li> <li>Testing: pytest and codecov</li> <li>Documentation: Generated with MkDocs</li> <li>Publishing: Automated PyPI publishing through GitHub releases</li> <li>Containerization: Development and deployment with Docker</li> <li>Dev environments: Consistent setup with VSCode devcontainers</li> <li>Multi-Python testing: tox-uv for all supported Python versions</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install UVI using UV (recommended):</p> <pre><code>uv tool install uvi\n</code></pre> <p>Alternative installation methods:</p> <pre><code># Using pipx\npipx install uvi\n\n# Using pip\npip install --user uvi\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Creating a new project couldn't be simpler:</p> <pre><code># Navigate to where you want to create your project\ncd ~/projects\n\n# Run UVI\nuvi\n</code></pre> <p>Follow the prompts to configure your project. UVI will:</p> <ol> <li>Auto-detect your user information from git or GitHub CLI</li> <li>Generate a complete project structure</li> <li>Set up all the configured tools and infrastructure</li> </ol> <p>Once completed, you'll have a fully functional project ready for development. An example of a project generated with UVI can be found here.</p> <p>Note</p> <p>Advanced users can also use Cookiecutter directly with UVI's template. See Direct Cookiecutter Usage for more details on why both options are available.</p>"},{"location":"prompts/","title":"Prompts","text":"<p>Note</p> <p>Not Ai prompts, but rather the prompts for the <code>uvi</code> command. There zero Ai function in this project</p> <p>When running the command <code>uvi</code> a prompt will start which enables you to configure your repository. The prompt values and their explanation are as follows:</p> <p>author:</p> <p>Your full name.</p> <p>email:</p> <p>Your email address.</p> <p>author_github_handle:</p> <p>Your github handle, i.e. <code>&lt;handle&gt;</code> in <code>https://github.com/&lt;handle&gt;</code></p> <p>project_name:</p> <p>Your project name. Should be equal to the name of your repository and it should only contain alphanumeric characters and <code>-</code>'s.</p> <p>project_slug:</p> <p>The project slug, will default to the <code>project_name</code> with all <code>-</code>'s replaced with <code>_</code>. This will be how you import your code later, e.g.</p> <pre><code>from &lt;project_slug&gt; import foo\n</code></pre> <p>project_description:</p> <p>A short description of your project.</p> <p>include_github_actions:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds a <code>.github</code> directory with various actions and workflows to setup the environment and run code formatting checks and unittests.</p> <p>publish_to_pypi:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds functionality to the <code>Makefile</code> and Github workflows to make publishing your code as simple as creating a new release release on Github. For more info, see Publishing to PyPI.</p> <p>deptry:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds deptry to the development dependencies of the project, and adds it to the <code>make check</code> command. <code>deptry</code> is a command line tool to check for issues with dependencies in a Python project, such as obsolete or missing dependencies.</p> <p>mkdocs:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds MkDocs documentation to your project. This includes automatically parsing your docstrings and adding them to the documentation. Documentation will be deployed to the <code>gh-pages</code> branch.</p> <p>codecov:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds code coverage checks with codecov.</p> <p>dockerfile:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds a simple Dockerfile.</p> <p>devcontainer:</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds a devcontainer specification to the project along with pre-installed pre-commit hooks and VSCode python extension configuration.</p> <p>open_source_license:</p> <p>Choose a license. Options: <code>[\"1. MIT License\", \"2. BSD license\", \"3. ISC license\",  \"4. Apache Software License 2.0\", \"5. GNU General Public License v3\", \"6. Not open source\"]</code></p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This page contains a mostly complete tutorial on how to create your project.</p> <p>Like me know if something is missing. I'm happy to help!</p>"},{"location":"tutorial/#step-1-install-uv","title":"Step 1: Install uv","text":"<p>To start, we will need to install <code>uv</code>. The instructions to install uv can be found here. For MacOS or Linux;</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-project","title":"Step 2: Generate your project","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/shaneholloman/uvi.git\n</code></pre> <p>For an explanation of the prompt arguments, see Prompt Arguments.</p>"},{"location":"tutorial/#step-3-set-up-your-github-repository","title":"Step 3: Set up your Github repository","text":"<p>Create an empty new repository on Github. Give it a name that only contains alphanumeric characters and optionally <code>-</code>. DO NOT check any boxes under the option <code>Initialize this repository with</code>.</p>"},{"location":"tutorial/#step-4-upload-your-project-to-github","title":"Step 4: Upload your project to Github","text":"<p>Run the following commands, replacing <code>&lt;project-name&gt;</code> with the name that you also gave the Github repository and <code>&lt;github_author_handle&gt;</code> with your Github username.</p> <pre><code>cd &lt;project_name&gt;\ngit init -b main\ngit add .\ngit commit -m \"Init commit\"\ngit remote add origin git@github.com:&lt;github_author_handle&gt;/&lt;project_name&gt;.git\ngit push -u origin main\n</code></pre>"},{"location":"tutorial/#step-5-set-up-your-development-environment","title":"Step 5: Set Up Your Development Environment","text":"<p>Initially, the CI/CD pipeline will fail for two reasons:</p> <ul> <li>The project does not yet contain a <code>uv.lock</code> file</li> <li>There are a few formatting issues in the project</li> </ul> <p>To fix that, we first install the environment and the pre-commit hooks with:</p> <pre><code>make install\n</code></pre> <p>This will generate the <code>uv.lock</code> file</p>"},{"location":"tutorial/#step-6-run-the-pre-commit-hooks","title":"Step 6: Run the pre-commit hooks","text":"<p>Now, to resolve the formatting issues, let's run the pre-commit hooks:</p> <pre><code>uv run pre-commit run -a\n</code></pre>"},{"location":"tutorial/#7-commit-the-changes","title":"7. Commit the changes","text":"<p>Now we commit the changes made by the two steps above to the repository:</p> <pre><code>git add .\ngit commit -m 'Fix formatting issues'\ngit push origin main\n</code></pre>"},{"location":"tutorial/#step-8-sign-up-to-codecovio","title":"Step 8: Sign up to codecov.io","text":"<p>If you enabled code coverage with codecov for your project, you should sign up with your GitHub account at codecov.io</p>"},{"location":"tutorial/#step-9-configure-your-repository-secrets","title":"Step 9: Configure your repository secrets","text":"<p>If you want to deploy your project to PyPI using the Github Actions, you will have to set some repository secrets. For instructions on how to do that, see here.</p>"},{"location":"tutorial/#step-10-enable-your-documentation","title":"Step 10: Enable your documentation","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code>.</p>"},{"location":"tutorial/#step-11-create-a-new-release","title":"Step 11: Create a new release","text":"<p>To trigger a new release, navigate to your repository on GitHub, click <code>Releases</code> on the right, and then select <code>Draft a new release</code>. If you fail to find the button, you could also directly visit <code>https://github.com/&lt;username&gt;/&lt;repository-name&gt;/releases/new</code>.</p> <p>Give your release a title, and add a new tag in the form <code>*.*.*</code> where the <code>*</code>'s are alphanumeric. To finish, press <code>Publish release</code>.</p>"},{"location":"tutorial/#step-12-enable-your-documentation-ctd","title":"Step 12: Enable your documentation ct'd","text":"<p>Then navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. If you succesfully created a new release, you should see a notification saying <code>Your site is ready to be published at https://&lt;author_github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>.</p>"},{"location":"tutorial/#step-13-youre-all-set","title":"Step 13: You're all set","text":"<p>That's it! I hope this repository saved you a lot of manual configuration. If you have any improvement suggestions, feel free to raise an issue or open a PR on Github!</p>"},{"location":"audits/audit-by-gemini-2.5-pro/","title":"UVI Project Deep Analysis","text":"<p>Based on my thorough review of the UVI project, I've prepared a comprehensive audit of its strengths and weaknesses.</p>"},{"location":"audits/audit-by-gemini-2.5-pro/#project-overview","title":"Project Overview","text":"<p>UVI (UV Init) is a modern Python project generator built with Cookiecutter that creates pre-configured Python projects optimized for the UV package manager. It sets up a complete project structure with modern development tools, testing frameworks, documentation, CI/CD workflows, and more. The project is currently at version 0.5.0.</p> <pre><code>flowchart TD\n    CLI[CLI Interface] --&gt; Template[Cookiecutter Template]\n    Template --&gt; Features[Configurable Features]\n    Features --&gt; Project[Generated Project]\n\n    subgraph Features\n        Linting[Ruff/MyPy]\n        Testing[Pytest/Tox]\n        Docs[MkDocs]\n        CI[GitHub Actions]\n        Docker[Docker/Devcontainers]\n        Coverage[Codecov]\n    end</code></pre>"},{"location":"audits/audit-by-gemini-2.5-pro/#strengths","title":"Strengths","text":""},{"location":"audits/audit-by-gemini-2.5-pro/#1-modern-toolchain-integration","title":"1. Modern Toolchain Integration","text":"<ul> <li>UV Integration: First-class integration with UV package manager</li> <li>Up-to-date Tools: Uses modern development tools (Ruff 0.9.10, MyPy 1.15.0, Pytest 8.3.5)</li> <li>Recent Modernization: Successfully migrated from Pylint to Ruff with Pylint-equivalent rules</li> <li>Comprehensive Tooling: Includes pre-commit hooks, code coverage, documentation generation</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#2-comprehensive-project-generation","title":"2. Comprehensive Project Generation","text":"<ul> <li>Complete Structure: Generates fully functional project structure</li> <li>Feature Selection: Configurable features via interactive prompts</li> <li>Multi-version Support: Works with Python 3.10, 3.11, 3.12, and 3.13</li> <li>Flexibility: Users can tailor generated projects to their needs</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#3-well-architected-code","title":"3. Well-Architected Code","text":"<ul> <li>Clean Architecture: Clear separation of concerns with layered architecture</li> <li>Error Handling: Robust error handling in CLI implementation</li> <li>Cross-platform: Works across different operating systems with proper fallbacks</li> <li>Type Safety: Thorough type annotations throughout the codebase</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#4-smart-user-information-prefill","title":"4. Smart User Information Prefill","text":"<ul> <li>Tiered Approach:</li> <li>GitHub CLI (primary source)</li> <li>Git configuration (fallback)</li> <li>Generic defaults (last resort)</li> <li>User-friendly: Clear feedback about information sources</li> <li>GitHub Integration: Retrieves accurate GitHub username when available</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#5-comprehensive-documentation","title":"5. Comprehensive Documentation","text":"<ul> <li>MkDocs Integration: Well-structured documentation with Material theme</li> <li>Feature Documentation: Each feature is documented</li> <li>Future Planning: Detailed briefs for planned enhancements</li> <li>Project Memory: Well-maintained memory bank for project knowledge</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#6-strong-testing-infrastructure","title":"6. Strong Testing Infrastructure","text":"<ul> <li>Multiple Python Versions: Tests against Python 3.10 through 3.13</li> <li>Test Coverage: Good test coverage with pytest-cov</li> <li>Future Improvements: Planning migration from Tox to Nox</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#weaknesses","title":"Weaknesses","text":""},{"location":"audits/audit-by-gemini-2.5-pro/#1-cli-user-experience-limitations","title":"1. CLI User Experience Limitations","text":"<ul> <li>Strict Binary Inputs: Only accepts exact \"y\" or \"n\" inputs (enhancement planned)</li> <li>No Tool Verification: Doesn't check for required tools like <code>gh</code> or <code>uv</code></li> <li>Template Download Issue: Re-prompts for template download unnecessarily</li> <li>Limited Command-line Options: Few options available via CLI arguments</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#2-configuration-flexibility-gaps","title":"2. Configuration Flexibility Gaps","text":"<ul> <li>Python Version: No python_version selection option</li> <li>Limited Customization: Some features have minimal configuration options</li> <li>No Environment Variables: Lacks .env file handling capability</li> <li>No Codemapper Option: Missing codemapper integration</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#3-dependency-management-challenges","title":"3. Dependency Management Challenges","text":"<ul> <li>Version Parity: Potential mismatches between main project and template dependencies</li> <li>No Automated Synchronization: Manual updates required to keep versions in sync</li> <li>Documentation Lag: Documentation may not reflect latest dependency versions</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#4-cicd-and-documentation-deployment","title":"4. CI/CD and Documentation Deployment","text":"<ul> <li>Makefile Limitations: docs-deploy function needs improvement</li> <li>GitHub Pages: No automated GitHub Pages integration</li> <li>Publishing Workflow: Trusted PyPI publishing not yet implemented</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#5-technical-debt","title":"5. Technical Debt","text":"<ul> <li>Linting Issues: Remaining linting issues in info/ directory</li> <li>Tox Dependency: Still using Tox rather than more modern Nox (migration planned)</li> <li>Limited Error Messages: Some error scenarios could use more detailed feedback</li> </ul>"},{"location":"audits/audit-by-gemini-2.5-pro/#recommendations","title":"Recommendations","text":""},{"location":"audits/audit-by-gemini-2.5-pro/#short-term-improvements","title":"Short-term Improvements","text":"<ol> <li>Implement Enhanced Binary Input Handling: Complete the planned enhancement to accept y/Y/yes/1 and n/N/no/0</li> <li>Fix Template Download Behavior: Implement smart caching with <code>force_download</code> parameter</li> <li>Add Tool Availability Checks: Verify <code>gh</code> and <code>uv</code> are installed</li> <li>Fix Linting Issues: Resolve remaining issues in info/ directory</li> </ol>"},{"location":"audits/audit-by-gemini-2.5-pro/#medium-term-improvements","title":"Medium-term Improvements","text":"<ol> <li>Complete Tox to Nox Migration: Follow the migration plan in docs/briefs/tox-to-nox-migration.md</li> <li>Add Python Version Selection: Allow users to choose target Python version</li> <li>Implement Dependency Parity: Ensure versions match between main project and template</li> <li>Improve Documentation Deployment: Enhance the Makefile's docs-deploy function</li> </ol>"},{"location":"audits/audit-by-gemini-2.5-pro/#long-term-strategic-improvements","title":"Long-term Strategic Improvements","text":"<ol> <li>Enhanced CLI Options: Add more command-line options for non-interactive use</li> <li>Trusted PyPI Publishing: Add secure PyPI publishing workflow</li> <li>Environment Variable Support: Add .env file handling capabilities</li> <li>Comprehensive Templating Strategy: Address cookiecutter maintenance concerns</li> </ol>"},{"location":"audits/audit-by-gemini-2.5-pro/#conclusion","title":"Conclusion","text":"<p>UVI is a well-designed, modern project with strong foundations. It successfully achieves its core goal of simplifying Python project creation with UV integration. The recent improvements to user information prefill and the migration to Ruff demonstrate active maintenance and modernization efforts.</p> <p>The project has a clear roadmap for addressing its current limitations, with detailed briefs for most planned enhancements. By focusing on the identified weaknesses, particularly around user experience and configuration flexibility, UVI can further strengthen its position as a valuable tool for Python developers looking to adopt modern practices.</p>"},{"location":"blog/","title":"Blog","text":"<p>Content here ...</p>"},{"location":"briefs/cli-enhancements/","title":"UVI Enhancement Ideas","text":"<p>This document logs proposed enhancements to the UVI command-line interface to provide more flexibility and improved user experience.</p>"},{"location":"briefs/cli-enhancements/#current-cli-limitations","title":"Current CLI Limitations","text":"<p>The current UVI CLI implementation offers minimal command-line options (only <code>--version</code>), while providing significant value through its automatic user information detection. However, it lacks some of the flexibility available when using Cookiecutter directly.</p>"},{"location":"briefs/cli-enhancements/#proposed-enhancements","title":"Proposed Enhancements","text":""},{"location":"briefs/cli-enhancements/#high-value-additions","title":"High-Value Additions","text":""},{"location":"briefs/cli-enhancements/#1-quicksilent-mode","title":"1. Quick/Silent Mode","text":"<pre><code>uvi --quick   # or --silent or --simple\n</code></pre> <p>Only prompts for the project name and uses sensible defaults for everything else:</p> <ul> <li>Auto-detects user information (as it already does)</li> <li>Enables all features (GitHub Actions, PyPI publishing, deptry, MkDocs, codecov, Docker, devcontainer)</li> <li>Uses MIT license (most permissive common license)</li> <li>Generates a default description like \"A Python package for [project_name]\"</li> </ul> <p>User Experience Example:</p> <pre><code>$ uvi --quick\nDetecting user information...\nUsing information from GitHub account: username\nEnter project name: my-awesome-project\nCreating project with all features enabled...\nProject created successfully!\n</code></pre>"},{"location":"briefs/cli-enhancements/#2-configuration-profiles","title":"2. Configuration Profiles","text":"<pre><code># Create a minimalist project with just the basics\nuvi --profile minimal\n\n# Create a data science focused project\nuvi --profile datascience\n\n# Create a web application project\nuvi --profile webapp\n</code></pre> <p>Each profile would have different default selections for features that make sense for that type of project.</p>"},{"location":"briefs/cli-enhancements/#3-non-interactive-mode","title":"3. Non-Interactive Mode","text":"<pre><code>uvi --no-input [parameters]\n</code></pre> <p>Allow for scripted/automated project creation, passing values directly rather than through interactive prompts. Essential for CI/CD pipelines or batch operations.</p>"},{"location":"briefs/cli-enhancements/#4-parameter-overrides","title":"4. Parameter Overrides","text":"<pre><code>uvi --param project_name=myproject --param dockerfile=y\n</code></pre> <p>Allow specifying individual template parameters directly via CLI, useful for overriding specific values without answering all prompts.</p>"},{"location":"briefs/cli-enhancements/#5-output-directory-control","title":"5. Output Directory Control","text":"<pre><code>uvi --output-dir /path/to/projects\n</code></pre> <p>Specify where the generated project should be placed, rather than always using the current directory.</p>"},{"location":"briefs/cli-enhancements/#6-configuration-files","title":"6. Configuration Files","text":"<pre><code>uvi --config my-config.json\n</code></pre> <p>Support loading parameter values from a configuration file, enabling standardized project creation across a team.</p>"},{"location":"briefs/cli-enhancements/#7-template-savingreplay","title":"7. Template Saving/Replay","text":"<pre><code># Save configuration\nuvi --save-config my-python-service.json\n\n# Use saved configuration\nuvi --replay my-python-service.json\n</code></pre> <p>Save configurations for reuse, allowing consistent recreation of similar projects.</p>"},{"location":"briefs/cli-enhancements/#medium-value-additions","title":"Medium-Value Additions","text":""},{"location":"briefs/cli-enhancements/#8-template-customization","title":"8. Template Customization","text":"<pre><code>uvi --template https://github.com/user/custom-template.git\n</code></pre> <p>Allow specifying an alternative template source, enabling organization-specific templates.</p>"},{"location":"briefs/cli-enhancements/#9-preview-mode","title":"9. Preview Mode","text":"<pre><code>uvi --dry-run\n</code></pre> <p>Show what would be generated without actually creating files, useful for validation.</p>"},{"location":"briefs/cli-enhancements/#10-verbosity-control","title":"10. Verbosity Control","text":"<pre><code>uvi --quiet\nuvi --verbose\n</code></pre> <p>Control the amount of output during project generation.</p>"},{"location":"briefs/cli-enhancements/#11-overwrite-protection-toggle","title":"11. Overwrite Protection Toggle","text":"<pre><code>uvi --overwrite-if-exists\n</code></pre> <p>Allow overwriting existing directories when needed.</p>"},{"location":"briefs/cli-enhancements/#12-parameter-listing","title":"12. Parameter Listing","text":"<pre><code>uvi --list-parameters\n</code></pre> <p>Display all available parameters and their defaults without starting project creation.</p>"},{"location":"briefs/cli-enhancements/#implementation-considerations","title":"Implementation Considerations","text":"<p>Adding these options would require:</p> <ol> <li>Extending the argument parser in <code>main()</code></li> <li>Passing appropriate parameters to the Cookiecutter function</li> <li>Maintaining backward compatibility</li> <li>Updating documentation</li> </ol> <p>Most of these could be implemented as direct passes to Cookiecutter's API, making implementation relatively straightforward while significantly enhancing the UVI CLI's flexibility.</p>"},{"location":"briefs/cli-enhancements/#priority-recommendations","title":"Priority Recommendations","text":"<p>Based on user feedback and enhancement value, the following features are recommended as priority implementations:</p>"},{"location":"briefs/cli-enhancements/#highest-priority","title":"Highest Priority","text":"<ol> <li>Smarter Template Download Behavior - Eliminate the annoying re-download prompt</li> </ol> <pre><code># Current behavior: Always asks if you want to re-download the template\n# Improved behavior: Automatically use latest if online, use cached if offline\n</code></pre> <p>This would use Cookiecutter's <code>force_download</code> parameter with internet connectivity detection to:    - If online: Silently pull the latest template version    - If offline: Use the cached version without prompting</p> <p>Implementation would involve checking internet connectivity and setting the appropriate Cookiecutter parameters:</p> <pre><code>try:\n    # Try to connect to a reliable site\n    requests.get(\"https://pypi.org\", timeout=1)\n    # Online - force download latest\n    force_download = True\nexcept requests.RequestException:\n    # Offline - use cached version without asking\n    force_download = False\n\ncookiecutter(\n    template,\n    force_download=force_download,\n    # other params...\n)\n</code></pre>"},{"location":"briefs/cli-enhancements/#high-priority","title":"High Priority","text":"<ul> <li>Quick/Silent Mode - Provides immediate value for common use cases</li> <li>Parameter Overrides - Offers flexibility without complexity</li> <li>Non-Interactive Mode - Essential for automation</li> <li>Configuration Profiles - Streamlines workflow for different project types</li> </ul> <p>These enhancements would significantly improve the user experience while maintaining the simplicity that makes UVI valuable.</p>"},{"location":"briefs/enhanced-binary-inputs/","title":"Enhanced Binary Input Handling","text":""},{"location":"briefs/enhanced-binary-inputs/#overview","title":"Overview","text":"<p>This enhancement improves the UVI CLI questionnaire interface by allowing more flexible user input options for binary (yes/no) questions. Currently, users must enter exactly <code>y</code> or <code>n</code> for binary choices, which can lead to frustration when more intuitive responses like <code>Y</code>, <code>N</code>, <code>1</code>, or <code>2</code> are rejected.</p>"},{"location":"briefs/enhanced-binary-inputs/#problem-statement","title":"Problem Statement","text":"<p>The current UVI CLI uses Cookiecutter's default input handling, which strictly enforces the options defined in <code>cookiecutter.json</code>. For binary questions (those with <code>[\"y\", \"n\"]</code> choices), this means:</p> <ul> <li>Only lowercase <code>y</code> or <code>n</code> is accepted</li> <li>Common variations like uppercase <code>Y</code> or <code>N</code> are rejected</li> <li>Numeric inputs (<code>1</code> for yes, <code>2</code> for no) - which are intuitive for many CLI users - are not supported</li> <li>Each invalid input requires retyping the answer, creating friction in the user experience</li> </ul>"},{"location":"briefs/enhanced-binary-inputs/#enhancement-solution","title":"Enhancement Solution","text":"<p>This improvement will extend the input handling for binary questions to accept:</p> <ul> <li>Case-insensitive letter inputs: <code>y</code>, <code>Y</code>, <code>n</code>, <code>N</code></li> <li>Full word inputs: <code>yes</code>, <code>no</code> (case-insensitive)</li> <li>Numeric inputs: <code>1</code> (for yes), <code>2</code> (for no)</li> <li>While maintaining compatibility with the original <code>y</code>/<code>n</code> format</li> </ul>"},{"location":"briefs/enhanced-binary-inputs/#implementation-approach","title":"Implementation Approach","text":"<p>The implementation will:</p> <ol> <li>Create a custom input handler that wraps the Cookiecutter prompts</li> <li>Parse the <code>cookiecutter.json</code> configuration to identify binary choice questions</li> <li>For those questions, implement enhanced input validation and normalization</li> <li>Convert all accepted inputs to the standard Cookiecutter format (<code>y</code> or <code>n</code>)</li> <li>Provide clear error messages when inputs don't match any accepted format</li> </ol>"},{"location":"briefs/enhanced-binary-inputs/#technical-details","title":"Technical Details","text":"<p>The enhancement involves creating a custom prompt handler that:</p> <ol> <li>Reads the <code>cookiecutter.json</code> configuration</li> <li>Identifies binary choice questions (those with <code>[\"y\", \"n\"]</code> options)</li> <li>Processes user input through a flexible parser that normalizes various input formats</li> <li>Builds a complete context dictionary with all user responses</li> <li>Passes this pre-filled context to Cookiecutter with <code>no_input=True</code></li> </ol> <p>For binary questions, input processing will follow this logic:</p> <pre><code>def process_binary_input(user_input):\n    # Normalize input\n    normalized = user_input.strip().lower()\n\n    # Check for various affirmative inputs\n    if normalized in ('y', 'yes', '1'):\n        return 'y'\n\n    # Check for various negative inputs\n    if normalized in ('n', 'no', '2'):\n        return 'n'\n\n    # If input doesn't match any accepted format, return None\n    # to indicate invalid input\n    return None\n</code></pre>"},{"location":"briefs/enhanced-binary-inputs/#user-experience","title":"User Experience","text":"<p>With this enhancement, the following scenario becomes possible:</p> <pre><code>? include_github_actions [y/n]: Y        \u2192 Accepted (converted to 'y')\n? publish_to_pypi [y/n]: 2               \u2192 Accepted (converted to 'n')\n? deptry [y/n]: yes                      \u2192 Accepted (converted to 'y')\n? mkdocs [y/n]: NO                       \u2192 Accepted (converted to 'n')\n</code></pre> <p>If the user enters an invalid input, they will receive a clear error message prompting them to try again with one of the accepted formats.</p>"},{"location":"briefs/enhanced-binary-inputs/#alignment-with-project-goals","title":"Alignment with Project Goals","text":"<p>This enhancement supports UVI's commitment to a user-friendly CLI experience by:</p> <ol> <li>Reducing friction in the project creation process</li> <li>Following the principle of least surprise by accepting common input formats</li> <li>Maintaining backward compatibility with existing workflows</li> <li>Improving the overall user experience with more intuitive input handling</li> </ol>"},{"location":"briefs/enhanced-binary-inputs/#future-considerations","title":"Future Considerations","text":"<p>After this enhancement is implemented and tested, potential future improvements could include:</p> <ol> <li>Extending similar flexible input handling to other question types</li> <li>Adding color-coded prompts and responses for better visual clarity</li> <li>Implementing input history and tab completion for frequent choices</li> </ol>"},{"location":"briefs/github-pages-integration/","title":"GitHub Pages Integration","text":""},{"location":"briefs/github-pages-integration/#feature-overview","title":"Feature Overview","text":"<p>Add a new feature to the UVI project and cookiecutter template that includes the option to set up automatic GitHub Pages publishing for project documentation.</p>"},{"location":"briefs/github-pages-integration/#current-state","title":"Current State","text":"<p>UVI already has MkDocs integration and GitHub Actions support, with documentation deployment to GitHub Pages implemented but requiring manual steps:</p> <ol> <li>Users must set workflow permissions in GitHub repository settings</li> <li>Create a release to trigger deployment</li> <li>Manually configure GitHub Pages to use the gh-pages branch</li> </ol>"},{"location":"briefs/github-pages-integration/#cli-requirements","title":"CLI Requirements","text":"<p>UVI should strongly suggest (but not require) installing GitHub CLI to enable features like automatic GitHub Pages setup. During the project creation process, UVI should:</p> <ul> <li>Check if GitHub CLI is installed</li> <li>Provide friendly notification about enhanced features available with GitHub CLI</li> <li>Suggest how to install GitHub CLI for users who want these features</li> <li>Gracefully handle cases where GitHub CLI is not installed by falling back to manual instructions</li> </ul>"},{"location":"briefs/github-pages-integration/#implementation-plan","title":"Implementation Plan","text":"<pre><code>flowchart TD\n    A[Add github_pages option] --&gt; B[Create GitHub workflow]\n    B --&gt; C[Update hooks]\n    C --&gt; D[Create gh CLI setup script]\n    D --&gt; E[Update documentation]\n    E --&gt; F[Test implementation]</code></pre>"},{"location":"briefs/github-pages-integration/#1-add-option-to-cookiecutterjson","title":"1. Add Option to cookiecutter.json","text":"<p>Add a new parameter to the configuration:</p> <pre><code>\"github_pages\": [\"y\", \"n\"]\n</code></pre> <p>This option should only be shown if both <code>include_github_actions</code> and <code>mkdocs</code> are set to \"y\", as it requires both to function.</p>"},{"location":"briefs/github-pages-integration/#2-create-github-workflow-file","title":"2. Create GitHub Workflow File","text":"<p>Create a dedicated GitHub Pages deployment workflow file in the template:</p> <ul> <li><code>{{cookiecutter.project_name}}/.github/workflows/docs-deploy.yml</code></li> <li>This workflow will:</li> <li>Build the documentation using MkDocs</li> <li>Deploy to GitHub Pages with proper permissions configuration</li> <li>Run automatically on pushes to main branch</li> </ul>"},{"location":"briefs/github-pages-integration/#3-update-template-hooks","title":"3. Update Template Hooks","text":"<p>In addition to our original plan, we'll:</p> <ul> <li>Check if gh CLI is installed during the post-generation process</li> <li>Provide clear error messages if gh CLI is missing</li> </ul>"},{"location":"briefs/github-pages-integration/#4-create-github-pages-setup-script","title":"4. Create GitHub Pages Setup Script","text":"<p>Create a new script that will:</p> <ul> <li>Use gh CLI to enable GitHub Pages for the repository</li> <li>Configure the Pages source to use the gh-pages branch</li> <li>Set required repository permissions for GitHub Actions workflows</li> <li>Verify the configuration was successful</li> </ul> <p>This script could be added to the post-generation hook or as a separate utility the user can run after creation.</p>"},{"location":"briefs/github-pages-integration/#5-update-documentation","title":"5. Update Documentation","text":"<p>In addition to our original documentation plan:</p> <ul> <li>Document the requirement for gh CLI</li> <li>Provide instructions for manual setup if gh CLI is not available</li> <li>Explain the automatic configuration process</li> </ul>"},{"location":"briefs/github-pages-integration/#implementation-details-for-github-cli-integration","title":"Implementation Details for GitHub CLI Integration","text":"<p>The gh CLI commands we'll use include:</p> <pre><code># Check if repository exists (will be used in validation)\ngh repo view --json name\n\n# Enable GitHub Pages with gh-pages branch as source\ngh api --method PUT /repos/{owner}/{repo}/pages \\\n  -f build_type=\"workflow\" \\\n  -f source=\"gh-pages\"\n\n# Set repository workflow permissions\ngh api --method PUT /repos/{owner}/{repo}/actions/permissions \\\n  -f default_workflow_permissions=\"write\" \\\n  -f can_approve_pull_request_reviews=true\n</code></pre>"},{"location":"briefs/github-pages-integration/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<ol> <li>Fully Automated: Users won't need to manually configure GitHub Pages settings</li> <li>Immediate Deployment: Documentation can be published as soon as the first push</li> <li>Simplified Workflow: Removes multiple manual steps from the process</li> <li>Better User Experience: Reduces friction for users new to GitHub Pages</li> </ol>"},{"location":"briefs/github-pages-integration/#testing-strategy","title":"Testing Strategy","text":"<ol> <li>Document Baseline Behavior</li> <li>Create an example project with current code</li> <li>Document the manual steps needed for GitHub Pages setup</li> <li> <p>Save artifacts for comparison</p> </li> <li> <p>Implement Changes</p> </li> <li>Make code modifications to add the new feature</li> <li>Run linting and static analysis</li> <li> <p>Run the test suite to verify functionality</p> </li> <li> <p>Verify Implementation</p> </li> <li>Create example projects with the new feature enabled</li> <li>Verify GitHub Pages is properly configured</li> <li> <p>Test edge cases (missing gh CLI, existing repository configuration)</p> </li> <li> <p>A/B Comparison</p> </li> <li>Compare the original manual process with the automated approach</li> <li>Document time savings and reduced complexity</li> </ol>"},{"location":"briefs/makefile-enhancements/","title":"UVI Makefile Ideas","text":"<p>This document provides suggestions for enhancing UVI's Makefile based on a comparison with Cookiecutter's Makefile. These enhancements would provide additional developer conveniences and improve the development workflow.</p>"},{"location":"briefs/makefile-enhancements/#current-makefile-strengths","title":"Current Makefile Strengths","text":"<p>UVI's current Makefile already includes several excellent features:</p> <ul> <li>Integration with GitHub CLI for documentation deployment</li> <li>Sophisticated bake targets with pre-built options</li> <li>Comprehensive code quality checks (lock file consistency, pre-commit, mypy, deptry)</li> <li>Modern tooling integration (UV throughout)</li> <li>Well-documented target descriptions</li> <li>Clear separation of concerns</li> </ul>"},{"location":"briefs/makefile-enhancements/#proposed-enhancements","title":"Proposed Enhancements","text":""},{"location":"briefs/makefile-enhancements/#1-more-granular-clean-targets","title":"1. More Granular Clean Targets","text":"<p>Cookiecutter provides multiple specialized clean targets that give developers fine-grained control:</p> <pre><code>.PHONY: clean-tox\nclean-tox: ## Remove tox testing artifacts\n @echo \"+ $@\"\n @rm -rf .tox/\n\n.PHONY: clean-coverage\nclean-coverage: ## Remove coverage reports\n @echo \"+ $@\"\n @rm -rf htmlcov/\n @rm -rf .coverage\n @rm -rf coverage.xml\n\n.PHONY: clean-pytest\nclean-pytest: ## Remove pytest cache\n @echo \"+ $@\"\n @rm -rf .pytest_cache/\n\n.PHONY: clean-docs-build\nclean-docs-build: ## Remove local docs\n @echo \"+ $@\"\n @rm -rf docs/_build\n\n.PHONY: clean-pyc\nclean-pyc: ## Remove Python file artifacts\n @echo \"+ $@\"\n @find . -type d -name '__pycache__' -exec rm -rf {} +\n @find . -type f -name '*.py[co]' -exec rm -f {} +\n @find . -name '*~' -exec rm -f {} +\n\n.PHONY: clean\nclean: clean-build clean-pyc clean-tox clean-coverage clean-pytest clean-docs-build\n</code></pre> <p>UVI could benefit from similar granular targets, including a master <code>clean</code> target that combines all cleaning operations.</p>"},{"location":"briefs/makefile-enhancements/#2-test-coverage-viewing","title":"2. Test Coverage Viewing","text":"<p>Add a target to generate and automatically open coverage reports:</p> <pre><code>.PHONY: coverage\ncoverage: ## Generate and view coverage report\n @echo \"Generating coverage report\"\n @uv run python -m pytest --cov --cov-config=pyproject.toml --cov-report=html\n @uv run python -c \"import webbrowser, os; webbrowser.open('file://' + os.path.abspath('htmlcov/index.html'))\"\n</code></pre> <p>This would make it easier for developers to inspect coverage results after running tests.</p>"},{"location":"briefs/makefile-enhancements/#3-multi-python-version-testing","title":"3. Multi-Python Version Testing","text":"<p>While UVI uses tox for multi-version testing, the Makefile could provide an easy shortcut:</p> <pre><code>.PHONY: test-all\ntest-all: ## Test with all supported Python versions\n @echo \"Testing with all supported Python versions\"\n @uv run tox\n</code></pre>"},{"location":"briefs/makefile-enhancements/#4-separate-distribution-formats","title":"4. Separate Distribution Formats","text":"<p>Currently, UVI combines sdist and wheel building. Separating these could provide more flexibility:</p> <pre><code>.PHONY: sdist\nsdist: clean-build ## Build source distribution\n @echo \"Creating source distribution\"\n @uvx --from build pyproject-build --sdist --installer uv\n @ls -l dist\n\n.PHONY: wheel\nwheel: clean-build ## Build wheel\n @echo \"Creating wheel distribution\"\n @uvx --from build pyproject-build --wheel --installer uv\n @ls -l dist\n</code></pre>"},{"location":"briefs/makefile-enhancements/#5-documentation-improvements","title":"5. Documentation Improvements","text":"<p>Add targets for different documentation workflows:</p> <pre><code>.PHONY: docs-build\ndocs-build: ## Build documentation locally\n @echo \"Building documentation\"\n @uv run mkdocs build\n\n.PHONY: docs-serve\ndocs-serve: ## Serve documentation for local development\n @echo \"Serving documentation at http://localhost:8000\"\n @uv run mkdocs serve\n\n.PHONY: docs-check\ndocs-check: ## Check documentation for issues\n @echo \"Checking documentation\"\n @uv run mkdocs build -s\n</code></pre>"},{"location":"briefs/makefile-enhancements/#6-dev-environment-setup","title":"6. Dev Environment Setup","text":"<p>Make it easier to set up consistent development environments:</p> <pre><code>.PHONY: dev-setup\ndev-setup: ## Set up development environment\n @echo \"Setting up development environment\"\n @uv sync\n @uv run pre-commit install\n @echo \"Development environment ready\"\n</code></pre>"},{"location":"briefs/makefile-enhancements/#7-dependency-management","title":"7. Dependency Management","text":"<p>Add targets for managing and analyzing dependencies:</p> <pre><code>.PHONY: deps-update\ndeps-update: ## Update dependencies\n @echo \"Updating dependencies\"\n @uv tree --outdated\n\n.PHONY: deps-check\ndeps-check: ## Check for outdated dependencies\n @echo \"Checking for outdated dependencies\"\n @uv tree --outdated\n</code></pre>"},{"location":"briefs/makefile-enhancements/#implementation-considerations","title":"Implementation Considerations","text":"<ol> <li>Compatibility: These enhancements should maintain compatibility with existing targets</li> <li>Platform Independence: Ensure commands work across different operating systems</li> <li>Documentation: Each new target should include clear documentation comments</li> <li>UV Integration: Continue to leverage UV for all Python operations</li> </ol>"},{"location":"briefs/makefile-enhancements/#priority-recommendations","title":"Priority Recommendations","text":"<p>Based on development workflow impact, the following enhancements are recommended as priorities:</p> <ol> <li>Clean Targets: More granular clean operations would immediately improve developer experience</li> <li>Coverage Viewing: Directly visualizing test coverage would encourage better testing practices</li> <li>Dependency Management: Simplifying dependency updates would help maintain project health</li> <li>Dev Environment Setup: Making development setup more consistent would help contributors</li> </ol> <p>These enhancements would further improve UVI's development workflow while maintaining the project's commitment to modern Python practices and tooling.</p>"},{"location":"briefs/template-dependency-parity/","title":"Template Dependency Parity Brief","text":""},{"location":"briefs/template-dependency-parity/#project-context","title":"Project Context","text":"<p>UVI is a Python project generator that creates Python projects using UV for dependency management. The template should maintain functional parity with the main project to ensure a consistent \"dogfooding\" experience.</p>"},{"location":"briefs/template-dependency-parity/#current-status-and-issues","title":"Current Status and Issues","text":"<ul> <li>The main UVI project includes dependencies and configurations that are not currently reflected in the template</li> <li>Missing configurations can lead to inconsistent behavior between the main project and generated projects</li> <li>Users of generated projects may miss out on best practices established in the main project</li> </ul>"},{"location":"briefs/template-dependency-parity/#proposed-changes","title":"Proposed Changes","text":""},{"location":"briefs/template-dependency-parity/#phase-1-mkdocs-github-admonitions-plugin-complete","title":"Phase 1: MkDocs Github Admonitions Plugin (Complete)","text":"<ul> <li>Add <code>mkdocs-github-admonitions-plugin&gt;=0.0.3</code> to the template's dev dependencies</li> <li>This enables consistent documentation features between the main project and generated projects</li> </ul>"},{"location":"briefs/template-dependency-parity/#phase-2-ruff-import-configuration-needed","title":"Phase 2: Ruff Import Configuration (Needed)","text":"<ul> <li>Add the following configuration to template pyproject.toml:</li> </ul> <pre><code>[tool.ruff.lint.isort]\nrequired-imports = [\"from __future__ import annotations\"]\n</code></pre> <ul> <li>This ensures all files include future annotations, maintaining consistent import styling</li> </ul>"},{"location":"briefs/template-dependency-parity/#phase-3-build-publish-strategy-analysis","title":"Phase 3: Build &amp; Publish Strategy (Analysis)","text":"<ul> <li>Current main project includes <code>build&gt;=1.2.2.post1</code> and <code>twine&gt;=6.1.0</code> for package building/publishing</li> <li>Analysis reveals UV natively supports these operations via:</li> <li><code>uv build</code> - Replaces the build package functionality</li> <li><code>uv publish</code> - Replaces the twine package functionality</li> <li>Recommendation: Rather than adding these as dependencies, document the use of UV's native capabilities in generated projects</li> </ul>"},{"location":"briefs/template-dependency-parity/#implementation-plan","title":"Implementation Plan","text":"<ol> <li>Add the ruff isort configuration to the template</li> <li>Update project documentation to highlight UV's native build/publish capabilities</li> <li>Consider adding a new cookiecutter variable to include publishing documentation in README.md</li> <li>Verify the changes with a test project generation</li> </ol>"},{"location":"briefs/template-dependency-parity/#benefits","title":"Benefits","text":"<ol> <li>Improved Consistency: Generated projects will follow the same best practices as the main project</li> <li>Better Code Quality: Enforced import style results in more maintainable code</li> <li>UV-First Approach: Promoting UV's native capabilities over additional dependencies aligns with the project's philosophy</li> <li>Reduced Dependency Overhead: Using built-in UV features instead of adding dependencies simplifies project maintenance</li> </ol>"},{"location":"briefs/template-dependency-parity/#summary","title":"Summary","text":"<p>This brief proposes maintaining a closer alignment between the UVI main project and its template by:</p> <ol> <li>Adding the missing GitHub admonitions plugin dependency (completed)</li> <li>Adding missing ruff import configuration (pending)</li> <li>Leveraging UV's native build/publish capabilities instead of adding dependencies (strategic decision)</li> </ol> <p>These changes support the project's mission of providing a modern, UV-based Python project template with a consistent developer experience.</p>"},{"location":"briefs/tox-to-nox-migration/","title":"Tox to Nox Migration Brief","text":""},{"location":"briefs/tox-to-nox-migration/#project-context","title":"Project Context","text":"<p>UVI is a Python project template generator using UV for dependency management, currently using Tox for testing across multiple Python versions (3.10-3.13).</p>"},{"location":"briefs/tox-to-nox-migration/#migration-plan-summary","title":"Migration Plan Summary","text":""},{"location":"briefs/tox-to-nox-migration/#phase-1-setup-1-2-hours","title":"Phase 1: Setup (1-2 hours)","text":"<ul> <li>Install Nox (<code>uv add nox --dev</code>)</li> <li>Create basic noxfile.py mirroring current tox functionality</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#phase-2-implementation-3-4-hours","title":"Phase 2: Implementation (3-4 hours)","text":"<ul> <li>Develop complete noxfile.py with all test sessions</li> <li>Maintain feature parity with current tox configuration</li> <li>Configure Python version matrix (3.10-3.13)</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#phase-3-parallel-testing-2-3-hours","title":"Phase 3: Parallel Testing (2-3 hours)","text":"<ul> <li>Run both systems to verify identical results</li> <li>Fix any discrepancies in behavior</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#phase-4-template-documentation-2-3-hours","title":"Phase 4: Template &amp; Documentation (2-3 hours)","text":"<ul> <li>Update cookiecutter template to use noxfile.py</li> <li>Update documentation and guides</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#phase-5-tox-removal-1-hour","title":"Phase 5: Tox Removal (1 hour)","text":"<ul> <li>Remove tox dependencies and files</li> <li>Final verification</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#key-benefits","title":"Key Benefits","text":"<ol> <li>Better UV Integration: Direct UV command execution without plugins</li> <li>Increased Flexibility: Python-native configuration allows for:</li> <li>Programmatic test setup</li> <li>Code reuse between test sessions</li> <li> <p>Conditional testing logic</p> </li> <li> <p>Modern Architecture:</p> </li> <li>Function-based approach aligns with Python best practices</li> <li>Cleaner separation of concerns</li> <li> <p>More explicit dependency management</p> </li> <li> <p>Template Improvement:</p> </li> <li>Generated projects will use a more modern, flexible testing approach</li> <li>Better alignment with UVI's focus on contemporary Python tools</li> </ol>"},{"location":"briefs/tox-to-nox-migration/#noxfilepy-reference-implementation","title":"Noxfile.py Reference Implementation","text":"<pre><code>import nox\n\n# Configure Nox\nnox.options.sessions = [\"tests\"]\npython_versions = [\"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n\n@nox.session(python=python_versions)\ndef tests(session):\n    \"\"\"Run the test suite.\"\"\"\n    session.run(\"uv\", \"sync\", \"--python\", session.python, external=True)\n    session.install(\"pytest\", \"pytest-cookies\", \"pytest-cov\", \"pyyaml\")\n    session.run(\n        \"python\", \"-m\", \"pytest\", \"--doctest-modules\", \"tests\",\n        \"--cov\", \"--cov-config=pyproject.toml\", \"--cov-report=xml\"\n    )\n    session.run(\"mypy\")\n\n@nox.session(python=[\"3.13\"])\ndef lint(session):\n    \"\"\"Run the linter.\"\"\"\n    session.install(\"ruff\")\n    session.run(\"ruff\", \"check\", \".\")\n\n@nox.session(python=[\"3.13\"])\ndef docs(session):\n    \"\"\"Build the documentation.\"\"\"\n    session.install(\"mkdocs-material\", \"mkdocs-github-admonitions-plugin\", \"mkdocstrings[python]\")\n    session.run(\"mkdocs\", \"build\")\n</code></pre>"},{"location":"briefs/tox-to-nox-migration/#comparative-analysis-tox-vs-nox-for-uvi","title":"Comparative Analysis: Tox vs. Nox for UVI","text":""},{"location":"briefs/tox-to-nox-migration/#tox-advantages","title":"Tox Advantages","text":"<ul> <li>Already established in project</li> <li>tox-uv plugin integration</li> <li>Template consistency</li> <li>Familiar to contributors</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#nox-advantages","title":"Nox Advantages","text":"<ul> <li>Python-native configuration</li> <li>Direct UV command execution</li> <li>Function-based approach allows better code organization</li> <li>More flexible for complex testing scenarios</li> </ul>"},{"location":"briefs/tox-to-nox-migration/#next-steps","title":"Next Steps","text":"<ol> <li>Start with a minimal noxfile.py focused on core test functionality</li> <li>Verify each Python version works correctly</li> <li>Add specialized test sessions for additional checks</li> <li>Update template once core functionality is proven</li> </ol> <p>Total estimated time: 8-12 hours of development work</p>"},{"location":"briefs/uvi-future-strategy/","title":"UVI Future Strategy","text":"<p>Cookiecutter Maintenance Concerns and Future Strategy</p>"},{"location":"briefs/uvi-future-strategy/#current-status-assessment","title":"Current Status Assessment","text":"<p>As of March 2025, we've identified a potential concern regarding Cookiecutter's development activity:</p> <ul> <li>The last significant commit to the Cookiecutter repository was approximately 8-9 months ago</li> <li>While the project has 23.2K stars indicating wide adoption, the lack of recent maintenance is noteworthy</li> <li>Cookiecutter has reached a level of maturity where fewer updates might be expected, but the complete absence of activity raises questions</li> <li>No clear communication about the project's status has been provided by maintainers</li> </ul>"},{"location":"briefs/uvi-future-strategy/#implications-for-uvi","title":"Implications for UVI","text":"<p>UVI currently relies heavily on Cookiecutter as its core templating engine. This dependency presents several considerations:</p> <ol> <li>Stability vs. Innovation: A mature, stable codebase has advantages, but could also indicate stagnation</li> <li>Security Concerns: Unmaintained dependencies may eventually develop security vulnerabilities</li> <li>Compatibility Issues: As Python, UV, and other tools evolve, an unmaintained Cookiecutter might encounter compatibility problems</li> <li>Feature Development: UVI's feature roadmap could be constrained by limitations in an unmaintained dependency</li> </ol>"},{"location":"briefs/uvi-future-strategy/#strategic-options","title":"Strategic Options","text":"<p>We are considering several approaches to address this concern:</p>"},{"location":"briefs/uvi-future-strategy/#1-incremental-decoupling","title":"1. Incremental Decoupling","text":"<p>Gradually reduce tight coupling with Cookiecutter while maintaining compatibility:</p> <ul> <li>Move more logic into UVI's own codebase</li> <li>Use Cookiecutter as a library rather than a direct command wrapper</li> <li>Create abstractions that could work with different template engines</li> </ul>"},{"location":"briefs/uvi-future-strategy/#2-fork-insurance","title":"2. Fork Insurance","text":"<p>Consider creating a maintenance fork that we control:</p> <ul> <li>Maintain a UVI-specific fork of Cookiecutter as a fallback</li> <li>Sync periodically with upstream but be ready to diverge if needed</li> <li>This provides insurance if the original project becomes abandoned</li> </ul>"},{"location":"briefs/uvi-future-strategy/#3-expand-wrapper-capabilities","title":"3. Expand Wrapper Capabilities","text":"<p>Build more value in the wrapper layer that isn't dependent on Cookiecutter:</p> <ul> <li>Additional UVI-specific features as discussed in CLI enhancements</li> <li>Post-processing capabilities after Cookiecutter runs</li> <li>More intelligent defaults and project-specific optimizations</li> </ul>"},{"location":"briefs/uvi-future-strategy/#4-template-engine-abstraction","title":"4. Template Engine Abstraction","text":"<p>Consider a long-term plan to support multiple template engines:</p> <ul> <li>Design an abstraction layer that could work with Cookiecutter, Copier, or others</li> <li>Start with Cookiecutter but be architecturally ready to plug in alternatives</li> <li>This future-proofs UVI against changes in the template engine landscape</li> </ul>"},{"location":"briefs/uvi-future-strategy/#request-for-community-input","title":"Request for Community Input","text":"<p>We're actively seeking input from the UVI community on this matter. If you have thoughts, concerns, or suggestions regarding UVI's relationship with Cookiecutter, please share them by:</p> <ol> <li>Opening an issue on our GitHub repository with the tag <code>cookiecutter-strategy</code></li> <li>Joining the discussion in our community channels</li> <li>Sending your thoughts directly to the maintainers</li> </ol> <p>Specifically, we'd like to hear:</p> <ul> <li>Your assessment of Cookiecutter's current maintenance status</li> <li>Experience with similar situations in other projects</li> <li>Opinions on the strategic options outlined above</li> <li>Alternative approaches we haven't considered</li> <li>Willingness to contribute to any of the proposed strategies</li> </ul>"},{"location":"briefs/uvi-future-strategy/#implementation-considerations","title":"Implementation Considerations","text":"<p>Any strategy should balance:</p> <ol> <li>Not reinventing the wheel (Cookiecutter works well for core functionality)</li> <li>Protecting UVI from upstream risks</li> <li>Continuing to deliver unique value through UVI's opinionated approach</li> <li>Maintaining backward compatibility during transitions</li> </ol>"},{"location":"briefs/uvi-future-strategy/#next-steps","title":"Next Steps","text":"<p>Based on community feedback, we will:</p> <ol> <li>Document the prevailing community perspective</li> <li>Select a strategic approach with appropriate timeframes</li> <li>Create implementation tickets for the selected strategy</li> <li>Add relevant tasks to our roadmap</li> </ol> <p>Your input is valuable in helping shape the future direction of UVI and ensuring it remains a robust, reliable tool for Python project templating.</p>"},{"location":"development/homebrew-guide/","title":"Homebrew Guide","text":"<p>Making uvi Available via Homebrew</p> <p>This guide outlines the process of making <code>uvi</code> available through Homebrew, both via a personal tap and through Homebrew Core.</p>"},{"location":"development/homebrew-guide/#option-1-submit-to-homebrew-core-recommended","title":"Option 1: Submit to Homebrew Core (Recommended)","text":""},{"location":"development/homebrew-guide/#1-prepare-formula","title":"1. Prepare Formula","text":"<pre><code>class Uvi &lt; Formula\n  include Language::Python::Virtualenv\n\n  desc \"Python cookiecutter application for creating uv-managed projects\"\n  homepage \"https://github.com/shaneholloman/uvi\"\n  url \"https://api.github.com/repos/shaneholloman/uvi/releases/latest\", headers: [\"Accept: application/vnd.github.v3+json\"]\n  license \"MIT\"\n  head \"https://github.com/shaneholloman/uvi.git\", branch: \"main\"\n\n  depends_on \"python@3.12\"\n  depends_on \"uv\"\n\n  on_linux do\n    depends_on \"pkg-config\" =&gt; :build\n  end\n\n  resource \"cookiecutter\" do\n    url \"https://pypi.org/pypi/cookiecutter/json\"\n    regex(/latest_version\": \"([^\"]+)\"/)\n  end\n\n  def install\n    virtualenv_install_with_resources\n  end\n\n  test do\n    system \"#{bin}/uvi\", \"--version\"\n  end\nend\n</code></pre>"},{"location":"development/homebrew-guide/#2-submit-to-homebrew-core","title":"2. Submit to Homebrew Core","text":"<ol> <li>Fork the Homebrew Core repository</li> <li>Create a new branch: <code>git checkout -b add-uvi</code></li> <li>Add your formula to <code>Formula/u/uvi.rb</code></li> <li>Test locally:</li> </ol> <pre><code>brew test-bot --only-formulae uvi\n</code></pre> <ol> <li>Create a Pull Request</li> </ol>"},{"location":"development/homebrew-guide/#option-2-personal-tap","title":"Option 2: Personal Tap","text":""},{"location":"development/homebrew-guide/#1-create-homebrew-tap-repository","title":"1. Create Homebrew Tap Repository","text":"<ol> <li>Create a new GitHub repository named <code>homebrew-tools</code></li> <li>Clone it locally:</li> </ol> <pre><code>git clone git@github.com:shaneholloman/homebrew-tools.git\ncd homebrew-tools\n</code></pre> <ol> <li>Add the formula file:</li> </ol> <pre><code>mkdir -p Formula\n# Copy the formula from above into Formula/uvi.rb\n</code></pre>"},{"location":"development/homebrew-guide/#2-automated-updates-workflow","title":"2. Automated Updates Workflow","text":"<p>Create <code>.github/workflows/update-formula.yml</code>:</p> <pre><code>name: Update Formula\n\non:\n  repository_dispatch:\n    types: [uvi-release]\n  workflow_dispatch:\n    inputs:\n      version:\n        description: \"Version to update to (leave empty for latest)\"\n        required: false\n\njobs:\n  update-formula:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: \"3.12\"\n\n      - name: Get package info\n        id: package\n        run: |\n          VERSION=${{ github.event.inputs.version || github.event.client_payload.version }}\n          URL=\"https://files.pythonhosted.org/packages/source/u/uvi/uvi-${VERSION}.tar.gz\"\n          curl -L -o uvi.tar.gz \"$URL\"\n          SHA=$(sha256sum uvi.tar.gz | cut -d' ' -f1)\n          echo \"version=${VERSION}\" &gt;&gt; $GITHUB_ENV\n          echo \"url=${URL}\" &gt;&gt; $GITHUB_ENV\n          echo \"sha=${SHA}\" &gt;&gt; $GITHUB_ENV\n\n      - name: Update formula\n        run: |\n          sed -i \"s|url.*|url \\\"${{ env.url }}\\\"|\" Formula/uvi.rb\n          sed -i \"s|sha256.*|sha256 \\\"${{ env.sha }}\\\"|\" Formula/uvi.rb\n\n      - name: Create Pull Request\n        uses: peter-evans/create-pull-request@v6\n        with:\n          commit-message: \"feat: update uvi to ${{ env.version }}\"\n          title: \"Update uvi to ${{ env.version }}\"\n          body: |\n            Updates uvi formula to version ${{ env.version }}\n\n            - URL: ${{ env.url }}\n            - SHA256: ${{ env.sha }}\n          branch: update-uvi\n          delete-branch: true\n</code></pre>"},{"location":"development/homebrew-guide/#3-trigger-updates","title":"3. Trigger Updates","text":"<p>Add to your main <code>uvi</code> repository's release workflow:</p> <pre><code>update-homebrew:\n  needs: [publish] # Assuming you have a publish job\n  runs-on: ubuntu-latest\n  steps:\n    - name: Trigger formula update\n      uses: peter-evans/repository-dispatch@v3\n      with:\n        token: ${{ secrets.WORKFLOW_TOKEN }}\n        repository: shaneholloman/homebrew-tools\n        event-type: uvi-release\n        client-payload: '{\"version\": \"${{ github.ref_name }}\"}'\n</code></pre>"},{"location":"development/homebrew-guide/#4-installation-instructions","title":"4. Installation Instructions","text":"<p>Users can install via:</p> <pre><code># Add tap (one-time)\nbrew tap shaneholloman/tools\n\n# Install uvi\nbrew install uvi\n</code></pre>"},{"location":"development/homebrew-guide/#required-actions","title":"Required Actions","text":"<ol> <li> <p>For Homebrew Core:</p> <ul> <li> Get current PyPI package URL</li> <li> Calculate SHA256</li> <li> Submit PR to Homebrew Core</li> <li> Address reviewer feedback</li> </ul> </li> <li> <p>For Personal Tap:</p> <ul> <li> Create homebrew-tools repository</li> <li> Set up GitHub Actions workflow</li> <li> Add WORKFLOW_TOKEN secret</li> <li> Update release workflow in main repository</li> <li> Test installation process</li> </ul> </li> </ol>"},{"location":"development/homebrew-guide/#notes","title":"Notes","text":"<ul> <li>The personal tap approach gives you more control but requires users to add your tap</li> <li>Homebrew Core is preferred for wider distribution</li> <li>Both approaches can be maintained simultaneously</li> <li>Update automation only works with the personal tap approach</li> </ul>"},{"location":"development/linting-guide/","title":"Linting Guide","text":"<p>Linting Strategy Guide for UVI Development</p>"},{"location":"development/linting-guide/#overview","title":"Overview","text":"<p>This guide documents our linting approach using Ruff as our primary linter. Ruff is a fast, modern Python linter that includes Pylint-equivalent rules for comprehensive code quality checks.</p>"},{"location":"development/linting-guide/#linter-configuration","title":"Linter Configuration","text":""},{"location":"development/linting-guide/#ruff-configuration","title":"Ruff Configuration","text":"<p>Our Ruff settings in <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\ntarget-version = \"py39\"\nline-length = 120\nfix = true\n\n[tool.ruff.lint]\nselect = [\n  # flake8-2020\n  \"YTT\",\n  # flake8-bandit\n  \"S\",\n  # flake8-bugbear\n  \"B\",\n  # flake8-builtins\n  \"A\",\n  # flake8-comprehensions\n  \"C4\",\n  # flake8-debugger\n  \"T10\",\n  # flake8-simplify\n  \"SIM\",\n  # isort\n  \"I\",\n  # mccabe\n  \"C90\",\n  # pycodestyle\n  \"E\", \"W\",\n  # pyflakes\n  \"F\",\n  # pygrep-hooks\n  \"PGH\",\n  # pyupgrade\n  \"UP\",\n  # ruff\n  \"RUF\",\n  # tryceratops\n  \"TRY\",\n  # Pylint-equivalent rules\n  \"PLC\", # pylint-convention\n  \"PLE\", # pylint-error\n  \"PLR\", # pylint-refactor\n  \"PLW\", # pylint-warning\n]\nignore = [\n  # LineTooLong\n  \"E501\",\n  # DoNotAssignLambda\n  \"E731\",\n]\n</code></pre>"},{"location":"development/linting-guide/#running-linters","title":"Running Linters","text":""},{"location":"development/linting-guide/#development-checks","title":"Development Checks","text":"<pre><code># Check code\nruff check .\n\n# Fix auto-fixable issues\nruff check --fix .\n\n# Format code\nruff format .\n</code></pre>"},{"location":"development/linting-guide/#pre-commit-integration","title":"Pre-commit Integration","text":"<p>Our <code>.pre-commit-config.yaml</code> configuration:</p> <pre><code>repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: \"v0.6.3\"\n    hooks:\n      - id: ruff\n        args: [--exit-non-zero-on-fix, --config=pyproject.toml]\n        exclude: ^{{cookiecutter.project_name}}\n      - id: ruff-format\n        args: [--config=pyproject.toml]\n        exclude: ^{{cookiecutter.project_name}}\n</code></pre>"},{"location":"development/linting-guide/#linting-strategy","title":"Linting Strategy","text":""},{"location":"development/linting-guide/#why-ruff","title":"Why Ruff?","text":"<ol> <li> <p>Comprehensive Coverage</p> </li> <li> <p>Includes most functionality from tools like Flake8, Black, isort, pyupgrade, etc.</p> </li> <li>Incorporates Pylint-equivalent rules for deeper code analysis</li> <li> <p>Detects security issues, antipatterns, and complexity issues</p> </li> <li> <p>Performance</p> </li> <li> <p>Extremely fast execution (written in Rust)</p> </li> <li>Efficient for CI/CD pipelines</li> <li> <p>Quick developer feedback</p> </li> <li> <p>Modern Features</p> </li> <li>Auto-fix capabilities for many issues</li> <li>Type annotation checks</li> <li>Pre-commit integration</li> <li>Built-in formatter</li> </ol>"},{"location":"development/linting-guide/#what-ruff-catches","title":"What Ruff Catches","text":"<ul> <li>Import sorting and organization</li> <li>Code style and formatting issues</li> <li>Type annotation problems</li> <li>Security vulnerabilities</li> <li>Unused imports and variables</li> <li>Complex code and high cyclomatic complexity</li> <li>Documentation issues</li> <li>And much more!</li> </ul>"},{"location":"development/linting-guide/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Development Workflow</p> </li> <li> <p>Run Ruff frequently during development</p> </li> <li>Use Ruff's auto-fix capability (<code>ruff check --fix</code>)</li> <li>Format code with <code>ruff format</code></li> <li> <p>Address all warnings before committing</p> </li> <li> <p>Issue Resolution</p> </li> <li> <p>Fix issues immediately during development</p> </li> <li>Use proper exception handling instead of noqa directives</li> <li> <p>Document necessary suppressions (rare cases only)</p> </li> <li> <p>Configuration Management</p> </li> <li>Keep Ruff rules up to date</li> <li>Minimize rule suppressions</li> <li>Document why rules are ignored when necessary</li> </ol>"},{"location":"development/linting-guide/#recommended-ide-setup","title":"Recommended IDE Setup","text":"<p>For the best development experience:</p> <ol> <li> <p>VS Code</p> </li> <li> <p>Install the Ruff extension</p> </li> <li>Configure auto-formatting on save</li> <li> <p>Enable lint-on-save</p> </li> <li> <p>PyCharm/IntelliJ</p> </li> <li>Use the Ruff plugin</li> <li>Configure auto-formatting</li> </ol>"},{"location":"development/linting-guide/#ci-integration","title":"CI Integration","text":"<p>Ruff runs in CI:</p> <ol> <li>Checks all code for issues</li> <li>Verifies formatting standards</li> <li>Must pass for PR approval</li> </ol>"},{"location":"development/linting-guide/#future-considerations","title":"Future Considerations","text":"<ol> <li> <p>Stay current with Ruff updates</p> </li> <li> <p>Ruff is actively developed</p> </li> <li>New rules and features are added regularly</li> <li> <p>Update to newer versions as available</p> </li> <li> <p>Regular Review</p> </li> <li>Reassess linting strategy periodically</li> <li>Update rules as project needs change</li> <li>Consider new tools as they emerge</li> </ol>"},{"location":"development/testing-guide/","title":"Testing Guide","text":"<p>Testing and Coverage Guide for UVI Development</p>"},{"location":"development/testing-guide/#overview","title":"Overview","text":"<p>This guide documents our testing strategy using pytest and code coverage reporting with codecov. It's based on practical experience developing the UVI (uv init) project.</p>"},{"location":"development/testing-guide/#project-structure","title":"Project Structure","text":"<p>Our test-related files are organized as follows:</p> <pre><code>uvi/\n\u251c\u2500\u2500 uvi/\n\u2502   \u251c\u2500\u2500 __init__.py     # Package version info (2 lines)\n\u2502   \u2514\u2500\u2500 cli.py          # Main CLI logic (27 lines)\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 test_cli.py           # Tests for CLI functionality\n\u2502   \u251c\u2500\u2500 test_cookiecutter.py  # Tests for template generation\n\u2502   \u2514\u2500\u2500 utils.py              # Helper functions for tests\n\u2514\u2500\u2500 pyproject.toml      # Test and coverage configuration\n</code></pre>"},{"location":"development/testing-guide/#running-tests","title":"Running Tests","text":""},{"location":"development/testing-guide/#basic-test-run","title":"Basic Test Run","text":"<pre><code>pytest\n</code></pre>"},{"location":"development/testing-guide/#with-coverage","title":"With Coverage","text":"<pre><code>pytest --cov\n</code></pre>"},{"location":"development/testing-guide/#full-test-suite-with-coverage-report","title":"Full Test Suite with Coverage Report","text":"<pre><code>uv run python -m pytest --cov --cov-config=pyproject.toml --cov-report=xml tests\n</code></pre>"},{"location":"development/testing-guide/#understanding-test-files","title":"Understanding Test Files","text":""},{"location":"development/testing-guide/#test-discovery","title":"Test Discovery","text":"<ul> <li>pytest automatically discovers test files matching these patterns:</li> <li><code>test_*.py</code></li> <li><code>*_test.py</code></li> <li>Functions must be prefixed with <code>test_</code></li> <li>Test classes must be prefixed with <code>Test</code></li> </ul>"},{"location":"development/testing-guide/#our-test-files","title":"Our Test Files","text":"<ol> <li> <p><code>test_cli.py</code></p> </li> <li> <p>Tests CLI functionality</p> </li> <li>Currently focuses on version display</li> <li> <p>Limited coverage due to interactive nature of CLI</p> </li> <li> <p><code>test_cookiecutter.py</code></p> </li> <li> <p>Tests template generation</p> </li> <li>Multiple test cases (20+)</li> <li> <p>Doesn't affect main package coverage</p> </li> <li> <p><code>utils.py</code></p> </li> <li>Helper functions for tests</li> <li>Not a test file (no <code>test_</code> prefix)</li> <li>Not included in test discovery</li> </ol>"},{"location":"development/testing-guide/#coverage-reporting","title":"Coverage Reporting","text":""},{"location":"development/testing-guide/#configuration","title":"Configuration","text":"<p>Coverage settings are in <code>pyproject.toml</code>:</p> <pre><code>[tool.coverage.run]\nbranch = true\nsource = [\"uvi\"]\nparallel = true\nconcurrency = [\"thread\", \"multiprocessing\"]\n\n[tool.coverage.report]\nskip_empty = true\nshow_missing = true\nexclude_lines = [\n    \"pragma: no cover\",\n    \"def __repr__\",\n    \"if self.debug:\",\n    \"raise NotImplementedError\",\n    \"if __name__ == .__main__.:\",\n    \"pass\",\n    \"raise ImportError\"\n]\n</code></pre>"},{"location":"development/testing-guide/#understanding-coverage-reports","title":"Understanding Coverage Reports","text":"<p>Example coverage output:</p> <pre><code>Name              Stmts   Miss Branch BrPart  Cover   Missing\n-------------------------------------------------------------\nuvi/__init__.py       2      0      0      0   100%\nuvi/cli.py           27     17      2      0    34%   45-72\n-------------------------------------------------------------\nTOTAL                29     17      2      0    39%\n</code></pre> <ul> <li>Coverage only measures code in the <code>uvi/</code> source directory</li> <li>Helper files in <code>tests/</code> don't affect coverage</li> <li>Coverage percentage represents how much source code is executed during tests</li> </ul>"},{"location":"development/testing-guide/#coverage-metrics-explained","title":"Coverage Metrics Explained","text":"<ul> <li>Stmts: Number of statements</li> <li>Miss: Number of statements not executed</li> <li>Branch: Number of possible branches (if/else)</li> <li>BrPart: Number of partially executed branches</li> <li>Cover: Overall coverage percentage</li> <li>Missing: Line numbers not covered</li> </ul>"},{"location":"development/testing-guide/#testing-challenges","title":"Testing Challenges","text":""},{"location":"development/testing-guide/#interactive-cli-testing","title":"Interactive CLI Testing","text":"<ul> <li>Interactive features are difficult to test</li> <li>Mock with caution</li> <li>Focus on testing non-interactive parts</li> </ul>"},{"location":"development/testing-guide/#coverage-vs-functionality","title":"Coverage vs. Functionality","text":"<ul> <li>Lower coverage doesn't necessarily indicate poor quality</li> <li>Some code paths (like error handling) are hard to test</li> <li>Prioritize reliable tests over coverage percentage</li> </ul>"},{"location":"development/testing-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Keep tests focused and independent</li> <li>Use <code>utils.py</code> for shared test functionality</li> <li>Don't force coverage of interactive features</li> <li>Document test limitations</li> <li>Run full test suite before committing</li> </ol>"},{"location":"development/testing-guide/#continuous-integration","title":"Continuous Integration","text":"<p>Coverage reports are generated during CI runs and can be viewed:</p> <ol> <li>In the GitHub Actions output</li> <li>On the codecov dashboard</li> <li>In the generated <code>coverage.xml</code> file</li> </ol> <p>Remember that while high coverage is desirable, the reliability and maintainability of tests should take precedence over coverage metrics.</p>"},{"location":"features/admonitions/","title":"GitHub Admonitions","text":"<p>Convert GitHub admonitions to <code>mkdocs</code> admonitions when building docs, so that you can have admonitions on GitHub and in the documentation from the same file.</p> <p>Tip</p> <p>This is an admonition. They are a useful tool to attract attention to information.</p>"},{"location":"features/admonitions/#usage","title":"Usage","text":"<p>To install the plugin:</p> <pre><code>uv install mkdocs-github-admonitions-plugin\n</code></pre> <p>Then in your <code>mkdocs.yml</code> file, add the plugin:</p> <pre><code>plugins:\n  - gh-admonitions\n</code></pre> <p>Now you can write Github-compatible admonitions, and they will be automatically converted when used in <code>mkdocs</code> pages.</p>"},{"location":"features/admonitions/#why-is-this-needed","title":"Why is this needed?","text":"<p>Both Github and <code>mkdocs</code> support admonitions from their markdown flavors. Unfortunately, their flavors are different. A Github admonition is written like this:</p> <pre><code>&gt; [!TIP]\n&gt; This is the Github admonition syntax.\n</code></pre> <p>And <code>mkdocs</code> admonitions are written like this:</p> <pre><code>!!! tip\n\n    This is the mkdocs-materials admonition syntax.\n</code></pre> <p>So an admonition in your documentation will render correctly on either Github or in your <code>mkdocs</code> pages, but not both. With this plugin, you write the admonition once in Github syntax, and it will still show correctly in the built <code>mkdocs</code> pages!</p>"},{"location":"features/admonitions/#limitations","title":"Limitations","text":"<p>The <code>mkdocs</code> admonitions are much more powerful. They can feature titles. They have more types, and you can add custom ones. You can render inline admonitions. They can be collapsable, and be collapsed by default. And much more.</p> <p>But since the GitHub syntax has none of that, this tool can not offer such <code>mkdocs</code> admonitions to be generated. All admonitions will be converted to non-collapsed title-less admonitions.</p> <p>GitHub admonitions feature two types which are not supported by <code>mkdocs</code>: <code>caution</code> and <code>important</code>. In converting these admonitions, we will preserve their title, but use the <code>danger</code> and <code>warning</code> symbol and color, respectively.</p>"},{"location":"features/admonitions/#examples","title":"Examples","text":"<p>Here is a gallery with various admonitions. They should show up correctly on the built documentation too!</p> <p>Tip</p> <p>This is normally formatted. Type in lower case. No extra spaces.  It contains two lines in markdown, but only a soft linebreak.</p> <p>Caution</p> <p>This admonition has:</p> <ul> <li>ALL CAPS in the type</li> <li>a list</li> </ul> <p>Note that this admonition uses the \"danger\" symbol with \"Caution\" title.</p> <p>Important</p> <p>This contains <code>inline</code> and</p> <pre><code>import this  # python code in ticks\n</code></pre> <pre><code> and code block with spaces\n</code></pre> <p>Note that this admonition uses the \"warning\" symbol with \"Important\" title.</p> <p>Note</p> <p>And this admonition contains an empty line</p> <p>That only has a <code>&gt;</code> character in markdown.</p> <p>Warning</p> <p>Admonitions may contains quotes</p> <p>Quotes always contain great wisdom.</p> <p>But pay attention! There may be admonitions which are really just code:</p> <pre><code>&gt; [!note]\n&gt; This is not an admonition.\n</code></pre>"},{"location":"features/admonitions/#disclaimer","title":"Disclaimer","text":"<p>This is an independent project and not affiliated with GitHub in any way.</p>"},{"location":"features/cicd/","title":"CI/CD with Github actions","text":"<p>when <code>include_github_actions</code> is set to <code>\"y\"</code>, a <code>.github</code> directory is added with the following structure:</p> <pre><code>.github\n\u251c\u2500\u2500 workflows\n\u251c\u2500\u2500\u2500 run-checks\n\u2502    \u2514\u2500\u2500 action.yml\n\u251c\u2500\u2500\u2500 setup-python-env\n\u2502    \u2514\u2500\u2500 action.yml\n\u251c\u2500\u2500 on-merge-to-main.yml\n\u251c\u2500\u2500 on-pull-request.yml\n\u2514\u2500\u2500 on-release-main.yml\n</code></pre> <p><code>on-merge-to-main.yml</code> and <code>on-pull-request.yml</code> are identical except for their trigger conditions; the first is run whenever a new commit is made to <code>main</code> (which should only happen through merge requests, hence the name), and the latter is run whenever a pull request is opened or updated. They call the <code>action.yml</code> files to set-up the environment, run the tests, and check the code formatting.</p> <p><code>on-release-main.yml</code> does all of the former whenever a new release is made on the <code>main</code> branch. In addition, <code>on-release-main.yml</code> also publishes the project to PyPI if <code>publish_to_pypi</code> is set to <code>\"y\"</code>, and it builds and deploys the documentation if <code>mkdocs</code> is set to <code>\"y\"</code>. To learn more about these features, see Publishing to PyPI and Documentation with MkDocs</p> <p>Additionally, all workflows check for compatibility with multiple Python versions if <code>tox</code> is set to <code>\"y\"</code>.</p>"},{"location":"features/cicd/#how-to-trigger-a-release","title":"How to trigger a release","text":"<p>To trigger a new release, navigate to your repository on GitHub, click <code>Releases</code> on the right, and then select <code>Draft a new release</code>. If you fail to find the button, you could also directly visit <code>https://github.com/&lt;username&gt;/&lt;repository-name&gt;/releases/new</code>.</p> <p>Give your release a title, and add a new tag in the form <code>*.*.*</code> where the <code>*</code>'s are alphanumeric. To finish, press <code>Publish release</code>.</p>"},{"location":"features/codecov/","title":"Test coverage with codecov","text":"<p>Code coverage is a tool used to identify lines of code in a software project that have not been tested. It is often expressed as a percentage of the number of lines tested divided by the total number of lines in the codebase. For example, a code coverage of 91% means that 91% of the codebase has been tested, leaving 9% untested. The tool helps developers ensure that all parts of the code are tested, improving the overall quality of the software.</p> <p>If <code>codecov</code> is set to <code>\"y\"</code>, <code>pytest-cov</code> is added as a development dependency, and <code>make test</code> will run the tests and output a coverage report as <code>coverage.xml</code>. If <code>include_github_actions</code> is set to <code>\"y\"</code>, coverage tests with codecov are added to the CI/CD pipeline. To enable this, sign up at codecov.io with your GitHub account. Additionally, a <code>codecov.yaml</code> file is created, with the following defaults:</p> <pre><code># Badge color changes from red to green between 70% and 100%\n# PR pipeline fails if codecov falls with 1%\n\ncoverage:\n  range: 70..100\n  round: down\n  precision: 1\n  status:\n    project:\n      default:\n        target: auto\n        threshold: 1%\n\n# Ignoring Paths\n# --------------\n# which folders/files to ignore\nignore:\n  - \"foo/bar.py\"\n</code></pre> <p>If <code>codecov</code> is set to <code>\"n\"</code>, <code>pytest-cov</code> is not added to the development dependencies and the github actions won't produce a coverage report.</p>"},{"location":"features/cookiecutter-examples/","title":"Cookiecutter Examples","text":"<p>Practical Cookiecutter Usage Examples</p> <p>This document provides practical examples of using Cookiecutter directly with UVI, demonstrating the flexibility discussed in Direct Cookiecutter Usage.</p>"},{"location":"features/cookiecutter-examples/#1-creating-a-project-with-custom-parameters","title":"1. Creating a Project with Custom Parameters","text":"<p>You can pass parameters directly to Cookiecutter to customize your project without interactive prompts:</p> <pre><code># Create a project with custom parameters\nuvx cookiecutter /path/to/uvi --no-input \\\n  project_name=api-service \\\n  project_description=\"API service created with direct cookiecutter\" \\\n  dockerfile=y \\\n  devcontainer=y\n</code></pre> <p>This creates a complete project with parameters specified on the command line, ideal for scripting or automation.</p>"},{"location":"features/cookiecutter-examples/#2-batch-project-creation","title":"2. Batch Project Creation","text":"<p>Direct Cookiecutter access enables creating multiple projects in a single operation:</p> <pre><code>#!/bin/bash\n# create_services.sh - Create multiple microservices from a template\nfor service in \"auth-service\" \"user-service\" \"payment-service\"; do\n  uvx cookiecutter /path/to/uvi --no-input \\\n    project_name=\"$service\" \\\n    project_description=\"Microservice for ${service}\" \\\n    dockerfile=y \\\n    devcontainer=y\ndone\n</code></pre> <p>This script generates three separate projects, each with its own configuration but sharing common settings. Excellent for creating collections of related microservices or libraries.</p>"},{"location":"features/cookiecutter-examples/#3-cicd-pipeline-integration","title":"3. CI/CD Pipeline Integration","text":"<p>For CI/CD environments, use something like:</p> <pre><code># In a GitHub Actions workflow\n- name: Generate project\n  run: |\n    uvx cookiecutter https://github.com/shaneholloman/uvi.git --no-input \\\n      project_name=${{ github.event.repository.name }} \\\n      project_description=\"${{ github.event.repository.description }}\" \\\n      include_github_actions=y \\\n      codecov=y\n</code></pre> <p>This approach allows generating standardized project templates based on repository metadata.</p>"},{"location":"features/cookiecutter-examples/#4-local-template-development","title":"4. Local Template Development","text":"<p>When developing the template itself, use local paths:</p> <pre><code># Use local template for testing changes\nuvx cookiecutter /path/to/local/uvi --no-input \\\n  project_name=\"test-project\" \\\n  include_github_actions=n\n</code></pre> <p>This allows for rapid testing of template changes without pushing to a remote repository.</p>"},{"location":"features/cookiecutter-examples/#5-creating-projects-in-specific-locations","title":"5. Creating Projects in Specific Locations","text":"<p>You can specify where the generated project should be created:</p> <pre><code># Output to a specific directory\nuvx cookiecutter /path/to/uvi --output-dir ./projects \\\n  project_name=\"specific-location\"\n</code></pre> <p>This is useful for organizing multiple generated projects in a structured way.</p>"},{"location":"features/cookiecutter-examples/#notes-on-parameter-formatting","title":"Notes on Parameter Formatting","text":"<ul> <li>Boolean values are passed as <code>y</code> or <code>n</code> (e.g., <code>dockerfile=y</code>)</li> <li>Strings with spaces need quotes (e.g., <code>project_description=\"My Project\"</code>)</li> <li>All parameters must match those in cookiecutter.json</li> <li>Parameter names are case-sensitive</li> </ul>"},{"location":"features/cookiecutter-examples/#available-parameters","title":"Available Parameters","text":"<p>All parameters defined in UVI's cookiecutter.json file:</p> Parameter Description Example Values author Author name \"Your Name\" email Author email \"your.email@example.com\" author_github_handle GitHub username \"your-github-handle\" project_name Project name \"example-project\" project_slug Slug for import (auto-generated) \"example_project\" project_description Brief description \"This is a template repository...\" include_github_actions Add GitHub Actions \"y\" or \"n\" publish_to_pypi Configure PyPI publishing \"y\" or \"n\" deptry Add deptry for dependency checking \"y\" or \"n\" mkdocs Add MkDocs documentation \"y\" or \"n\" codecov Add code coverage \"y\" or \"n\" dockerfile Add Dockerfile \"y\" or \"n\" devcontainer Add VS Code devcontainer \"y\" or \"n\" open_source_license License type \"MIT license\", \"BSD license\", etc."},{"location":"features/devcontainer/","title":"Devcontainers","text":"<p>Reproducible development environments with VSCode devcontainers</p> <p>If <code>devcontainer</code> is set to <code>\"y\"</code> project uses the VSCode devcontainer specification to create a reproducible development environment. The devcontainer is defined in the <code>.devcontainer</code> directory and pre-installs all dependencies from uv required to develop, test and build the project.</p> <p>The devcontainer also installs the pre-commit hooks and configures the VSCode python extension to use the appropriate python interpretor and pytest paths.</p>"},{"location":"features/direct-cookiecutter/","title":"Direct Cookiecutter Usage","text":"<p>UVI provides two ways to create new Python projects:</p> <ol> <li>Using the <code>uvi</code> command (recommended approach)</li> <li>Using Cookiecutter directly with the UVI template</li> </ol> <p>This document explains why both approaches are offered and the benefits of each.</p>"},{"location":"features/direct-cookiecutter/#what-uvis-cli-actually-does","title":"What UVI's CLI Actually Does","text":"<p>Looking at the implementation, the <code>uvi</code> command is essentially a wrapper around Cookiecutter that provides:</p> <ol> <li>User information auto-detection - It automatically gets user details from:</li> <li>GitHub CLI (if available and authenticated)</li> <li>Git config (local or global)</li> <li> <p>Falls back to generic defaults if needed</p> </li> <li> <p>Template resolution - It handles finding the template whether installed as a package or accessed directly</p> </li> <li> <p>Error handling - Provides friendly error messages for various failure scenarios</p> </li> </ol>"},{"location":"features/direct-cookiecutter/#why-direct-cookiecutter-usage-makes-sense","title":"Why Direct Cookiecutter Usage Makes Sense","text":""},{"location":"features/direct-cookiecutter/#1-advanced-user-flexibility","title":"1. Advanced User Flexibility","text":"<p>Advanced users familiar with Cookiecutter may want more control over the templating process. The direct approach lets them:</p> <ul> <li>Override specific parameters without going through the UVI CLI</li> <li>Use Cookiecutter's advanced features not exposed by the UVI wrapper</li> <li>Integrate with their existing Cookiecutter-based workflows</li> </ul>"},{"location":"features/direct-cookiecutter/#2-cicd-integration","title":"2. CI/CD Integration","text":"<p>In continuous integration pipelines, teams might prefer using Cookiecutter directly:</p> <ul> <li>More predictable for automated environments</li> <li>Can be used with pre-defined configuration files</li> <li>Easier to parameterize in build scripts</li> </ul>"},{"location":"features/direct-cookiecutter/#3-availability","title":"3. Availability","text":"<p>There may be environments where:</p> <ul> <li>Installing the full UVI package isn't feasible</li> <li>Users already have Cookiecutter installed</li> <li>Dependency conflicts prevent installing UVI</li> </ul>"},{"location":"features/direct-cookiecutter/#4-educational-value","title":"4. Educational Value","text":"<p>Showing direct Cookiecutter usage:</p> <ul> <li>Makes the implementation transparent</li> <li>Teaches users about the underlying technology</li> <li>Demonstrates how they could create their own templates</li> </ul>"},{"location":"features/direct-cookiecutter/#5-separation-of-concerns","title":"5. Separation of Concerns","text":"<p>This design respects the separation between:</p> <ul> <li>Template content (what UVI provides)</li> <li>Template usage mechanism (how it's accessed)</li> </ul>"},{"location":"features/direct-cookiecutter/#its-about-options-not-redundancy","title":"It's About Options, Not Redundancy","text":"<p>Having both options isn't redundant - it's providing appropriate interfaces for different user needs:</p> <ul> <li>Casual users get a simplified <code>uvi</code> command</li> <li>Advanced users get direct Cookiecutter access</li> <li>Both access the same high-quality template</li> </ul> <p>The code specifically handles both scenarios, with logic to determine if it's running as an installed package or accessed directly through Cookiecutter.</p>"},{"location":"features/direct-cookiecutter/#how-to-use-cookiecutter-directly","title":"How to Use Cookiecutter Directly","text":"<p>As mentioned in the README, you can use Cookiecutter directly with:</p> <pre><code># Still using UV (preferred)\nuvx cookiecutter https://github.com/shaneholloman/uvi.git\n\n# Without UV (not recommended)\npip install cookiecutter\ncookiecutter https://github.com/shaneholloman/uvi.git\n</code></pre> <p>This gives you all the power of UVI's templates with the flexibility of Cookiecutter's interface.</p> <p>Tip</p> <p>For practical use cases and specific examples of how to leverage direct Cookiecutter usage in various scenarios, see the Cookiecutter Examples document.</p>"},{"location":"features/docker/","title":"Containerization with Docker","text":"<p>If <code>dockerfile</code> is set to <code>\"y\"</code>, a simple <code>Dockerfile</code> is added to the repository. The Dockerfile installs uv, sets up the environment and runs <code>foo.py</code> when run.</p> <p>The docker image can be built with</p> <pre><code>docker build . -t my-docker-image\n</code></pre> <p>It can then be run in the background with</p> <pre><code>docker run -d my-docker-image\n</code></pre> <p>Or, run it interactive mode with</p> <pre><code>docker run --rm -it --entrypoint bash my-docker-image\n</code></pre>"},{"location":"features/linting/","title":"Linting and code quality","text":"<p>Code can be linted and quality-checked with the command</p> <pre><code>make check\n</code></pre> <p>Note that this requires the pre-commit hooks to be installed.</p> <p>This command will run the following tools:</p>"},{"location":"features/linting/#ruff","title":"ruff","text":"<p>ruff is used to lint and format the code, and it is configured through <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\ntarget-version = \"py310\"\nline-length = 120\nfix = true\nselect = [\n    # flake8-2020\n    \"YTT\",\n    # flake8-bandit\n    \"S\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-builtins\n    \"A\",\n    # flake8-comprehensions\n    \"C4\",\n    # flake8-debugger\n    \"T10\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n    # mccabe\n    \"C90\",\n    # pycodestyle\n    \"E\", \"W\",\n    # pyflakes\n    \"F\",\n    # pygrep-hooks\n    \"PGH\",\n    # pyupgrade\n    \"UP\",\n    # ruff\n    \"RUF\",\n    # tryceratops\n    \"TRY\",\n]\nignore = [\n    # LineTooLong\n    \"E501\",\n    # DoNotAssignLambda\n    \"E731\",\n]\n\n[tool.ruff.format]\npreview = true\n\n[tool.ruff.per-file-ignores]\n\"tests/*\" = [\"S101\"]\n</code></pre>"},{"location":"features/linting/#mypy","title":"mypy","text":"<p>mypy is used for static type checking, and it's configuration and can be edited in <code>pyproject.toml</code>.</p> <pre><code>[tool.mypy]\ndisallow_untyped_defs = true\ndisallow_any_unimported = true\nno_implicit_optional = true\ncheck_untyped_defs = true\nwarn_return_any = true\nwarn_unused_ignores = true\nshow_error_codes = true\nexclude = [\n    '\\.venv',\n    '{{cookiecutter.project_name}}',\n    'tests'\n]\n</code></pre>"},{"location":"features/linting/#deptry","title":"deptry","text":"<p>deptry is used to check the code for dependency issues, and it can be configured by adding a <code>[tool.deptry]</code> section in <code>pyproject.toml</code>. For more information, see this section documentation of deptry.</p>"},{"location":"features/linting/#prettier","title":"Prettier","text":"<p>Prettier is used to format the markdown documentation, along with any json and yaml files. Its options can be configured in the included <code>.editorconfig</code> file or in greater detail by adding a <code>.prettierrc</code> file (See Docs).</p> <pre><code>[*]\nmax_line_length = 120\n\n[*.json]\nindent_style = space\nindent_size = 2\n</code></pre>"},{"location":"features/linting/#github-actions","title":"Github Actions","text":"<p>If <code>include_github_actions</code> is set to <code>\"y\"</code>, code formatting is checked for every merge request, every merge to main, and every release.</p>"},{"location":"features/makefile/","title":"Makefile","text":"<p>The generated repository will have a <code>Makefile</code> available. A list of all available commands that are available can be obtained by running <code>make help</code> in the terminal. Initially, if all features are selected, the following commands are available:</p> <pre><code>install              Install the uv environment and install the pre-commit hooks\ncheck                Lint and check code by running ruff, mypy and deptry.\ntest                 Test the code with pytest\nbuild                Build wheel file using uv\nclean-build          clean build artifacts\npublish              publish a release to pypi.\nbuild-and-publish    Build and publish.\ndocs-test            Test if documentation can be built without warnings or errors\ndocs                 Build and serve the documentation\n</code></pre>"},{"location":"features/mkdocs/","title":"Documentation with MkDocs","text":"<p>If <code>mkdocs</code> is set to <code>\"y\"</code>, documentation of your project is automatically added using MkDocs. Next to that, if <code>\"include_github_actions\"</code> is set to <code>\"y\"</code>, the documentation is automatically deployed to your <code>gh-pages</code> branch, and made available at <code>https://&lt;github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To view the documentation locally, simply run</p> <pre><code>make docs\n</code></pre> <p>This command will generate and build your documentation, and start the server locally so you can access it at http://localhost:8000.</p>"},{"location":"features/mkdocs/#enabling-the-documentation-on-github","title":"Enabling the documentation on GitHub","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code></p> <p>Then, create a new release for your project.</p> <p>Then, in your repository, navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. If you succesfully created a new release, you should see a notification saying <code>Your site is ready to be published at https://&lt;author_github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>. Your documentation should then be live within a few minutes.</p>"},{"location":"features/mkdocs/#documenting-docstrings","title":"Documenting docstrings","text":"<p>The generated project also converts all your docstrings into legible documentation. By default, the project is configured to work with google style docstrings.</p> <p>An example of a Google style docstring:</p> <pre><code>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool:\n\"\"\"Example function with PEP 484 type annotations.\n\nArgs:\n    param1: The first parameter.\n    param2: The second parameter.\n\nReturns:\n    The return value. True for success, False otherwise.\n</code></pre> <p>For more examples, see here.</p>"},{"location":"features/publishing/","title":"Publishing to PyPI","text":""},{"location":"features/publishing/#releasing-from-github","title":"Releasing from Github","text":"<p>When <code>publish_to_pypi</code> is set to <code>\"y\"</code>, the <code>on-release-main.yml</code> workflow publishes the code to PyPI whenever a new release is made.</p> <p>Before you can successfully publish your project from the release workflow, you need to add some secrets to your github repository so they can be used as environment variables.</p>"},{"location":"features/publishing/#set-up-for-pypi","title":"Set-up for PyPI","text":"<p>In order to publish to PyPI, the secret <code>PYPI_TOKEN</code> should be set in your repository. In your Github repository, navigate to <code>Settings &gt; Secrets &gt; Actions</code> and press <code>New repository secret</code>. As the name of the secret, set <code>PYPI_TOKEN</code>. Then, in a new tab go to your PyPI Account settings and select <code>Add API token</code>. Copy and paste the token in the <code>Value</code> field for the Github secret in your first tab, and you're all set!</p>"},{"location":"features/publishing/#publishing-from-your-local-machine","title":"Publishing from your local machine","text":"<p>It is also possible to release locally, although it is not recommended. To do so, run:</p> <pre><code>make build-and-publish\n</code></pre>"},{"location":"features/pytest/","title":"Unittesting with Pytest","text":"<p>pytest is automatically added to the environment. There will be a template unittest in the <code>tests</code> directory upon creation of the project, which can be run with</p> <pre><code>make test\n</code></pre> <p>If <code>include_github_actions</code> is set to <code>\"y\"</code>, the tests are automatically run for every merge request, every merge to main, and every release.</p>"},{"location":"features/tox/","title":"Testing with Tox and uv","text":"<p>This project integrates tox-uv to leverage uv's fast, reliable package management for testing. When <code>tox</code> is set to <code>\"y\"</code>, your project will use tox with uv for all test environments and dependency management.</p>"},{"location":"features/tox/#setup","title":"Setup","text":"<ol> <li>Create and activate a virtual environment:</li> </ol> <pre><code>uv venv\n.venv/Scripts/activate  # On Windows\n</code></pre> <ol> <li>Install all dependencies (including tox, tox-uv, and test dependencies):</li> </ol> <pre><code>uv sync\n</code></pre> <p>Note: The project's test dependencies (pytest, pytest-cov, mypy, pyyaml) are automatically installed in each tox environment.</p> <p>If you need to recreate the virtual environment:</p> <pre><code>Remove-Item -Recurse -Force .venv  # On Windows\nrm -rf .venv                       # On Unix\nuv venv\nuv sync\n</code></pre> <p>The integration with uv means:</p> <ul> <li>Faster environment creation</li> <li>More reliable dependency resolution</li> <li>Consistent package management across development and testing</li> </ul>"},{"location":"features/tox/#what-tox-does","title":"What Tox Does","text":"<ul> <li>Creates isolated virtual environments</li> <li>Tests package installation</li> <li>Runs tests against multiple Python versions</li> <li>Executes linting and formatting checks</li> <li>Validates package builds</li> </ul>"},{"location":"features/tox/#running-tox","title":"Running Tox","text":"<p>Basic usage:</p> <pre><code>uv run tox\n</code></pre> <p>Run specific environments:</p> <pre><code>uv run tox -e py310  # Run tests for Python 3.10\nuv run tox -e py311  # Run tests for Python 3.11\n</code></pre>"},{"location":"features/tox/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>By default, the project is tested with Python <code>3.10</code>, <code>3.11</code>, <code>3.12</code>, and <code>3.13</code>.</p> <p>Testing for compatibility with different Python versions is automatically done in the CI/CD pipeline:</p> <ul> <li>On every pull request</li> <li>On merges to main</li> <li>On each release</li> </ul>"},{"location":"features/tox/#when-to-use-tox","title":"When to Use Tox","text":"<ul> <li>Before pushing code changes</li> <li>To verify package works across Python versions</li> <li>Running complete test suite in clean environments</li> <li>Executing all quality checks in one command</li> </ul>"},{"location":"features/tox/#customizing-python-versions","title":"Customizing Python Versions","text":"<p>To test compatibility with additional Python versions:</p> <ol> <li>Add versions to <code>tox.ini</code></li> <li>Update the workflows in <code>.github</code></li> </ol>"},{"location":"features/uv/","title":"Dependency Management","text":"<p>The generated repository uses uv for fast, reliable Python package management. When you create your repository using this cookiecutter template, a uv environment is pre-configured in <code>pyproject.toml</code>.</p>"},{"location":"features/uv/#adding-dependencies","title":"Adding Dependencies","text":"<p>To add project-specific dependencies:</p> <pre><code>uv add &lt;package&gt;\n</code></pre>"},{"location":"features/uv/#common-commands","title":"Common Commands","text":""},{"location":"features/uv/#installing-dependencies","title":"Installing Dependencies","text":"<pre><code>uv sync\n</code></pre> <p>This command:</p> <ul> <li>Installs all dependencies from pyproject.toml</li> <li>Creates/updates uv.lock with exact versions</li> <li>Use when setting up a new environment or after adding new dependencies</li> </ul>"},{"location":"features/uv/#reproducible-installations","title":"Reproducible Installations","text":"<pre><code>uv sync --frozen\n</code></pre> <p>This command:</p> <ul> <li>Installs exact versions from uv.lock</li> <li>Ensures consistent environments across machines</li> <li>Use for production deployments or team synchronization</li> </ul>"},{"location":"features/uv/#updating-dependencies","title":"Updating Dependencies","text":"<p>To update all dependencies to their latest compatible versions:</p> <ol> <li>Remove the lock file:</li> </ol> <pre><code>rm uv.lock\n</code></pre> <ol> <li>Sync dependencies:</li> </ol> <pre><code>uv sync\n</code></pre> <p>This will:</p> <ul> <li>Fetch latest compatible versions</li> <li>Create a new lock file</li> <li>Install updated packages</li> </ul>"},{"location":"features/uv/#running-commands","title":"Running Commands","text":"<p>You can run commands within your virtual environment:</p> <pre><code>uv run python -m pytest\n</code></pre>"},{"location":"features/uv/#when-to-use-each-command","title":"When to Use Each Command","text":"<ul> <li> <p><code>uv sync</code>:</p> </li> <li> <p>Setting up new development environment</p> </li> <li>After adding new dependencies</li> <li> <p>When you want to update to latest compatible versions</p> </li> <li> <p><code>uv sync --frozen</code>:</p> </li> <li>Deploying to production</li> <li>Ensuring team has identical dependencies</li> <li>After pulling changes with new uv.lock</li> </ul>"}]}